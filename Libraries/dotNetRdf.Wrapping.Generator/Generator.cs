using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using System.Threading;

namespace VDS.RDF.Wrapping.Generator;

public abstract class Generator<T> : IIncrementalGenerator
{
    void IIncrementalGenerator.Initialize(IncrementalGeneratorInitializationContext context) =>
        context.RegisterSourceOutput(
            source: context.SyntaxProvider.ForAttributeWithMetadataName(
                fullyQualifiedMetadataName: AttributeName,
                predicate: Predicate,
                transform: Transform),
            action: Generate);

    protected abstract string AttributeName { get; }

    protected abstract bool Predicate(SyntaxNode syntaxNode, CancellationToken ct);

    private void Generate(SourceProductionContext context, T model) =>
        context.AddSource(
            FileNameFrom(model),
            SourceText.From(model.ToString(), Encoding.UTF8));

    protected abstract T Transform(GeneratorAttributeSyntaxContext context, CancellationToken ct);

    protected abstract string FileNameFrom(T model);
}

public abstract class ClassGenerator<T> : Generator<T> where T : ClassModel
{
    protected override string FileNameFrom(T model) => $"{model.ClassName}.generated.cs";

    protected override bool Predicate(SyntaxNode syntaxNode, CancellationToken _) =>
        syntaxNode is ClassDeclarationSyntax property
        && property.Modifiers.Any(SyntaxKind.PartialKeyword);
}

public abstract class PropertyGenerator<T> : Generator<T> where T : PropertyModel
{
    protected override string FileNameFrom(T model) => $"{model.ClassName}.{model.PropertyName}.generated.cs";

    protected override bool Predicate(SyntaxNode syntaxNode, CancellationToken _) =>
        syntaxNode is PropertyDeclarationSyntax property
        && property.Modifiers.Any(SyntaxKind.PartialKeyword);
}

[Generator]
public class DatasetGenerator : ClassGenerator<DatasetModel>
{
    protected override string AttributeName { get; } = "VDS.RDF.Wrapping.Attributes.DatasetAttribute";

    protected override DatasetModel Transform(GeneratorAttributeSyntaxContext context, CancellationToken _) => new(context);
}

[Generator]
public class GraphGenerator : ClassGenerator<GraphModel>
{
    protected override string AttributeName { get; } = "VDS.RDF.Wrapping.Attributes.GraphAttribute";

    protected override GraphModel Transform(GeneratorAttributeSyntaxContext context, CancellationToken _) => new(context);
}

[Generator]
public class NamedGraphGenerator : PropertyGenerator<NamedGraphModel>
{
    protected override string AttributeName { get; } = "VDS.RDF.Wrapping.Attributes.NamedGraphAttribute";

    protected override NamedGraphModel Transform(GeneratorAttributeSyntaxContext context, CancellationToken _) => new(context);
}

public record ClassModel
{
    protected ClassModel(GeneratorAttributeSyntaxContext context)
    {
        ClassName = context.TargetSymbol.Name;
        Namespace = context.TargetSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat).Replace("global::", "");
    }

    public string ClassName { get; }
    public string Namespace { get; }
}

public record PropertyModel
{
    protected PropertyModel(GeneratorAttributeSyntaxContext context)
    {
        PropertyName = context.TargetSymbol.Name;
        ClassName = context.TargetSymbol.ContainingType.Name;
        Namespace = context.TargetSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat).Replace("global::", "");
        Accessibility = context.TargetSymbol.DeclaredAccessibility;
        ReturnType = (context.TargetSymbol as IPropertySymbol).Type.Name;
    }

    public string PropertyName { get; }
    public string ClassName { get; }
    public string Namespace { get; }
    public Accessibility Accessibility { get; }
    public string ReturnType { get; }
}

public record NamedGraphModel : PropertyModel
{
    public NamedGraphModel(GeneratorAttributeSyntaxContext context) : base(context)
    {
        GraphName = context.Attributes[0].ConstructorArguments[0].Value as string;
    }

    public string GraphName { get; }

    public override string ToString()
    {
        var accessibility = Accessibility switch
        {
            Accessibility.Private => "private",
            Accessibility.ProtectedAndInternal => "protected internal",
            Accessibility.Protected => "protected",
            Accessibility.Internal => "internal",
            Accessibility.Public => "public",
            _ => string.Empty,
        };

        return $$"""
                // <auto-generated />
                #nullable enable
                using VDS.RDF;
                
                namespace {{Namespace}};
                
                partial class {{ClassName}}
                {
                    {{accessibility}} partial {{ReturnType}} {{PropertyName}} => {{ReturnType}}.Wrap(Graphs[factory.CreateUriNode(UriFactory.Create("{{GraphName}}"))]);
                }
                #nullable restore
                """;
    }

}

public record DatasetModel : ClassModel
{
    public DatasetModel(GeneratorAttributeSyntaxContext context) : base(context) { }

    public override string ToString() => $$"""
        // <auto-generated />
        #nullable enable
        using VDS.RDF;
                
        namespace {{Namespace}};
                
        partial class {{ClassName}} : WrapperTripleStore
        {
            private static readonly NodeFactory factory = new();
                
            protected {{ClassName}}(ITripleStore original) : base(original) { }
                
            internal static {{ClassName}} Wrap(ITripleStore original) => original switch
            {
                {{ClassName}} same => same,
                _ => new(original),
            };
        }
        #nullable restore
        """;
}

public record GraphModel : ClassModel
{
    public GraphModel(GeneratorAttributeSyntaxContext context) : base(context) { }

    public override string ToString() => $$"""
        // <auto-generated />
        #nullable enable
        using VDS.RDF;
                
        namespace {{Namespace}};
                
        partial class {{ClassName}} : WrapperGraph
        {
            protected {{ClassName}}(IGraph original) : base(original) { }

            internal static {{ClassName}} Wrap(IGraph original) => original switch
            {
                {{ClassName}} same => same,
                _ => new(original),
            };
        }
        #nullable restore
        """;
}