using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System.Data;
using System.Text;
using System.Threading;

namespace VDS.RDF.Wrapping.Generator;

//[Generator]
public class OldDatasetGenerator : IIncrementalGenerator
{
    private const string Dataset = "VDS.RDF.Wrapping.Attributes.DatasetAttribute";
  
    public void Initialize(IncrementalGeneratorInitializationContext context) =>
        context.RegisterSourceOutput(
            source: context.SyntaxProvider.ForAttributeWithMetadataName(
                fullyQualifiedMetadataName: Dataset,
                predicate: IsPartialClass,
                transform: DatasetModel.From),
            action: GenerateSource);

    private static bool IsPartialClass(SyntaxNode syntaxNode, CancellationToken _) =>
        syntaxNode is ClassDeclarationSyntax property
        && property.Modifiers.Any(SyntaxKind.PartialKeyword);

    private static void GenerateSource(SourceProductionContext context, DatasetModel model) =>
        context.AddSource(
            $"{model.ClassName}.generated.cs",
            SourceText.From(model.ToString(), Encoding.UTF8));

    private record DatasetModel
    {
        private DatasetModel(GeneratorAttributeSyntaxContext context)
        {
            ClassName = context.TargetSymbol.Name;
            Namespace = context.TargetSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat).Replace("global::", "");
        }

        internal static DatasetModel From(GeneratorAttributeSyntaxContext context, CancellationToken _) => new(context);

        public string ClassName { get; }
        public string Namespace { get; }

        public override string ToString() => $$"""
            // <auto-generated />
            #nullable enable
            using VDS.RDF;
                
            namespace {{Namespace}};
                
            partial class {{ClassName}} : WrapperTripleStore
            {
                private static readonly NodeFactory factory =  new();
                
                protected {{ClassName}}(ITripleStore original) : base(original) { }
                
                internal static {{ClassName}} Wrap(ITripleStore original) => original switch
                {
                    {{ClassName}} same => same,
                    _ => new(original),
                };
            }
            #nullable restore
            """;
    }
}
