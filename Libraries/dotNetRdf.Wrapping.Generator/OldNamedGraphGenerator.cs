using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using System.Threading;

namespace VDS.RDF.Wrapping.Generator;

//[Generator]
public class OldNamedGraphGenerator : IIncrementalGenerator
{
    private const string NamedGraph = "VDS.RDF.Wrapping.Attributes.NamedGraphAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context) =>
       context.RegisterSourceOutput(
           source: context.SyntaxProvider.ForAttributeWithMetadataName(
               fullyQualifiedMetadataName: NamedGraph,
               predicate: IsPartialProperty,
               transform: DatasetPropertyModel.From),
           action: GenerateSource);

    private static bool IsPartialProperty(SyntaxNode syntaxNode, CancellationToken _) =>
        syntaxNode is PropertyDeclarationSyntax property
        && property.Modifiers.Any(SyntaxKind.PartialKeyword);

    private static void GenerateSource(SourceProductionContext context, DatasetPropertyModel model) =>
        context.AddSource(
            $"{model.ClassName}.{model.Name}.generated.cs",
            SourceText.From(model.ToString(), Encoding.UTF8));

    private record DatasetPropertyModel
    {
        private DatasetPropertyModel(GeneratorAttributeSyntaxContext context)
        {
            Name = context.TargetSymbol.Name;
            ClassName = context.TargetSymbol.ContainingType.Name;
            Namespace = context.TargetSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat).Replace("global::", "");
            Accessibility = context.TargetSymbol.DeclaredAccessibility;
            ReturnType = (context.TargetSymbol as IPropertySymbol).Type.Name;
            GraphName = context.Attributes[0].ConstructorArguments[0].Value as string;
        }
        internal static DatasetPropertyModel From(GeneratorAttributeSyntaxContext context, CancellationToken _) => new(context);

        public string Name { get; }
        public string ClassName { get; }
        public string Namespace { get; }
        public Accessibility Accessibility { get; }
        public string ReturnType { get; }
        public string GraphName { get; }

        public override string ToString()
        {
            var accessibility = Accessibility switch
            {
                Accessibility.Private => "private",
                Accessibility.ProtectedAndInternal => "protected internal",
                Accessibility.Protected => "protected",
                Accessibility.Internal => "internal",
                Accessibility.Public => "public",
                _ => string.Empty,
            };

            return $$"""
                // <auto-generated />
                #nullable enable
                using VDS.RDF;
                
                namespace {{Namespace}};
                
                partial class {{ClassName}}
                {
                    {{accessibility}} partial {{ReturnType}} {{Name}} => {{ReturnType}}.Wrap(Graphs[factory.CreateUriNode(UriFactory.Create("{{GraphName}}"))]);
                }
                #nullable restore
                """;
        }
    }
}
