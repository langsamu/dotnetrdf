using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using System.Threading;

namespace VDS.RDF.Wrapping.Generator;

//[Generator]
public class OldGraphGenerator : IIncrementalGenerator
{
    private const string Graph = "VDS.RDF.Wrapping.Attributes.GraphAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context) =>
        context.RegisterSourceOutput(
            source: context.SyntaxProvider.ForAttributeWithMetadataName(
                fullyQualifiedMetadataName: Graph,
                predicate: IsPartialClass,
                transform: GraphModel.From),
            action: GenerateSource);

    private static bool IsPartialClass(SyntaxNode syntaxNode, CancellationToken _) =>
        syntaxNode is ClassDeclarationSyntax property
        && property.Modifiers.Any(SyntaxKind.PartialKeyword);

    private static void GenerateSource(SourceProductionContext context, GraphModel model) =>
        context.AddSource(
            $"{model.ClassName}.generated.cs",
            SourceText.From(model.ToString(), Encoding.UTF8));

    private record GraphModel
    {
        private GraphModel(GeneratorAttributeSyntaxContext context)
        {
            ClassName = context.TargetSymbol.Name;
            Namespace = context.TargetSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat).Replace("global::", "");
        }

        internal static GraphModel From(GeneratorAttributeSyntaxContext context, CancellationToken _) => new(context);

        public string ClassName { get; }
        public string Namespace { get; }

        public override string ToString() => $$"""
            // <auto-generated />
            #nullable enable
            using VDS.RDF;
                
            namespace {{Namespace}};
                
            partial class {{ClassName}} : WrapperGraph
            {
                protected {{ClassName}}(IGraph original) : base(original) { }

                internal static {{ClassName}} Wrap(IGraph original) => original switch
                {
                    {{ClassName}} same when ReferenceEquals(same, original) => same,
                    _ => new(original),
                };
            }
            #nullable restore
            """;
    }
}
